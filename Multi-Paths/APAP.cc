
#include "CnSm.h"

#include <cassert>
#include <stdlib.h>
#include "NetwControlInfo.h"
#include "CnSmPkt_m.h"
#include "SimTracer.h"
#include "LogNormalShadowing.h"

//zkp
#include <math.h>
#include <cstdio>
#include <ctime>
#include <limits>
#include <algorithm>
#include <cmath>
#include "MacToNetwControlInfo.h"
#include "ArpInterface.h"
#include "FindModule.h"
//#include "Authentification_m.h"
#include "SimTracer.h"
#include "connectionManager/ConnectionManagerAccess.h"
#include "DummyRoute.h"
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <iostream>
#include <string>
#include <iostream>
#include <iomanip>
#include <bitset>
#include <sstream>
#include <fstream>
#include <openssl/bn.h>
#include <openssl/sha.h>

#define MAX 1024
//zkp

Define_Module(CnSm);

void CnSm::initialize(int stage)
{
    BaseNetwLayer::initialize(stage);

    if(stage == 1) {
        hasPar("defaultTtl") ? defaultTtl = par("defaultTtl") : defaultTtl = 6;

        //maxNetQueueSize=par("maxNetQueueSize");
        optiEnable=par("optiEnable");
        zkpEnable=par("zkpEnable");
        posture = par("posture");
        headerLength = par("headerLength");
        sinkAddress =1;
        floodSeqNumber = 0;
        nbDataPacketsForwarded = 0;
        nbDataPacketsReceived = 0;
        nbDataPacketsSent = 0;
        Deseqence0=0;
        Deseqence2=0;
        Deseqence3=0;
        Deseqence4=0;
        Deseqence5=0;
        Deseqence6=0;
        nbDesquence=0;
        nbForwarded0=0;
        nbForwarded2=0;
        nbForwarded3=0;
        nbForwarded4=0;
        nbForwarded5=0;
        nbForwarded6=0;
        nbRecu0=0;
        nbRecu2=0;
        nbRecu3=0;
        nbRecu4=0;
        nbRecu5=0;
        nbRecu6=0;
        dataReceived=0;
        overbuff=0;
        nbHops = 0;
        check=0;
        nbHopN=0;
        t005 =0;
        t010=0;
        t015=0;
        t020=0;
        t025=0;
        t030=0;
        t035=0;
        t040=0;
        t045=0;
        t050=0;
        t055=0;
        t060=0;
        t065=0;
        t070=0;
        t075=0;
        t080=0;
        t085=0;
        t090=0;
        t095=0;
        t100=0;
        t105=0;
        t110=0;
        t115=0;
        t120=0;
        t125=0;
        t130=0;
        t135=0;
        t140=0;
        t145=0;
        t150=0;
        t155=0;
        t160=0;
        t165=0;
        t170=0;
        t175=0;
        t180=0;
        i=0;
        rep=0;
        k=0;
        rep1=0;
        for (i=0; i<6; i++)
            tab[i]=-1;

        for (i=0; i<7; i++){
            for(int j =0; j<5;j++){
                tabmsgrec[i][j]=-1;
            }
        }

        i=0;
        if(myNetwAddr==0){ tab[0]=1; tab[1]=0; tab[2]=6; tab[3]=2; tab[4]=-1; tab[5]=-1;}
        if(myNetwAddr==2){ tab[0]=1; tab[1]=0; tab[2]=3; tab[3]=1; tab[4]=-1; tab[5]=-1;}
        if(myNetwAddr==3){ tab[0]=1; tab[1]=0; tab[2]=2; tab[3]=1; tab[4]=-1; tab[5]=-1;}
        if(myNetwAddr==4){ tab[0]=5; tab[1]=2; tab[2]=-1; tab[3]=-1; tab[4]=-1; tab[5]=-1;}
        if(myNetwAddr==5){ tab[0]=0; tab[1]=1; tab[2]=6; tab[3]=2; tab[4]=-1; tab[5]=-1;}
        if(myNetwAddr==6){ tab[0]=0; tab[1]=1; tab[2]=3; tab[3]=1; tab[4]=-1; tab[5]=-1;}

        if(myNetwAddr==0){ tabson[0]=5; tabson[1]=6; }
        if(myNetwAddr==2){ tabson[0]=3; tabson[1]=2540; }
        if(myNetwAddr==3){ tabson[0]=2; tabson[1]=6; }
        if(myNetwAddr==4){ tabson[0]=2540; tabson[1]=2540; }
        if(myNetwAddr==5){ tabson[0]=4; tabson[1]=2540; }
        if(myNetwAddr==6){ tabson[0]=0; tabson[1]=5; }

        //BGW
        //these parameters are only needed for plain flooding
        hasPar("bcMaxEntries") ? bcMaxEntries = par("bcMaxEntries") : bcMaxEntries = 30;
        //BGW
        hasPar("bcDelTime") ? bcDelTime = par("bcDelTime") : bcDelTime = 180.0;
        EV <<"bcMaxEntries = "<<bcMaxEntries
                <<" bcDelTime = "<<bcDelTime<<endl;

        //zkp
        for (i=0; i<750; i++) concat[i]=-2;
        lettre = ' ';
        i=0;
        len2=0;
        len3=0;
        Vacop=0;
        Va=0;
        rep=0;
        rep1=0;
        len1=0;
        if(myNetwAddr==0){
            q="9";
            V="1024";
            key
        }
        if(myNetwAddr==2){
            q="12";
            V="900";
            key
        }
        if(myNetwAddr==3){
            q="13";
            V="2203";
            key
        }
        if(myNetwAddr==4){
            q="9";
            V="570";
            key
        }
        if(myNetwAddr==5){
            q="11";
            V="1700";
            key
        }
        if(myNetwAddr==6){
            q="23";
            V="1003";
            key
        }
        if(myNetwAddr==1){

            V01="1024";
            V02="900";
            V03="2203";
            V04="570";
            V05="1700";
            V06="1003";

            p01="13";
            p02="11";
            p03="7";
            p04="17";
            p05="9";
            p06="5";

            key
            key
            key
            key
            key
            key

            key
            key
            key
            key
            key
            key06="10001111100010000010000011000101101000110110010001101110010001111111100000001001010101010010111100010110110001000011110101110000010001111111011110000010101000001011000111001110111110101101110011111100000111010101100010001001110001001101000110000011111001100010010111101001010101111010100100101110110010111110101000010100110011000000011100110000001011001000000000001001011101101111011100100101111011011101001110010010000000111100000110010001011010010010110000100101100000111010001101110100110100011011001101000001110011110101100101001011111111110110001011001001100101011010101011001101001011100110100001011010110001111110001000110110010111101011100011100000011100101111111010101000110111100011001001110011101001001110010011100100011010100001111000101111010000011100111101011001010010111111111101100010110010011101000001110011110101100101001011111111110110001011001001100101011010101011001110110001111110010101001001011101100100010011010001100000111110011000100101111010010101011110111001110111110101101110011110010101101010101100111011000111111001010100100101110110010001001101000110000011111001100010010111101001010101111011100111011111110100000111001111010110010100101111111111011000101100100110110100000111001111010110010100101111111111011000101100100110010101101010101100111011000111111001010100100101110110010001001101000110000011111001100010010111101001010101111011100111011111010110111001110101011010101011001110110001111110010101001001011101100100010011010001100000111110011000100101111011100100111011010000011100111101011001010010111111111101100010110010011001010110101010010101011110111001110111110100011001010110101010010101011110111011100111011111010111011100111010110111011100110001101111";

        }
        ///////////////////////////////////////////////////////////////////////////
        BN_CTX *Ctx = BN_CTX_new();
        range = BN_new();
        rnd=BN_new();
        puiss=BN_new();
        div=BN_new();
        rem=BN_new();
        reslf=BN_new();


        BN_free(range);
        BN_free(rnd);
        BN_CTX_free(Ctx);

        for (i = 0; i < 2700; i++)
        {
            tableau[i] = -1;
            tabx[i]=-1;
            tab1[i]=-1;
            Res0[i]=-1;
            Res01[i]=-1;
        }
        for (i = 0; i < 2700; i++){
            ResFN[i]='-';
            ResFS[i]='-';
            ResFN1[i]='-';
            ResFS1[i]='-';
            N[i]='-';
        }

        //zkp
    }
}

CnSm::~CnSm()
{
    cancelAndDelete(0);
}

void CnSm::handleLowerMsg(cMessage* msg)
{
    CnSmPkt*           netwMsg        = check_and_cast<CnSmPkt*>(msg);
    const LAddress::L3Type& finalDestAddr  = netwMsg->getFinalDestAddr();
    const LAddress::L3Type& finalDestAddr1  = netwMsg->getFinalDestAddr1();
    dataReceived++;
    EV<<"ttl "<<netwMsg->getTtl()<<endl;
    if (finalDestAddr!=myNetwAddr && finalDestAddr1!=myNetwAddr) {
        delete netwMsg;
    }
    else{
        if (myNetwAddr == 1)
        {
            int bgw = 0;
        }
        const cObject* pCtrlInfo = NULL;
        CnSmPkt* msgCopy;
        msgCopy = netwMsg;

        if (netwMsg->getTtl()>1)
        {
            msgCopy = check_and_cast<CnSmPkt*>(netwMsg->dup());
            if ((netwMsg->getKind()==DATA ||netwMsg->getKind() == ZKPC0 ||netwMsg->getKind() == ZKPC2 )&& myNetwAddr!=1){

                netwMsg->setSrcAddr(myNetwAddr);
                i=0;
                while (i<=3){
                    if(tab[i]==1){
                        rep1=1;
                        i=4;
                    }
                    i=i+2;
                }
                i=0;
                if (rep1==1){
                    netwMsg->setFinalDestAddr(1);
                    netwMsg->setFinalDestAddr1(2540);
                    check=1;
                }else{
                    netwMsg->setFinalDestAddr(tab[i]);
                    netwMsg->setFinalDestAddr1(tab[i+2]);
                    check=1;
                }
                rep1=0;

                netwMsg->setTtl( netwMsg->getTtl()-1 );
                pCtrlInfo = netwMsg->removeControlInfo();


                if(optiEnable==1)
                {
                    multiSend(netwMsg);
                }
                else
                {
                    setDownControlInfo(netwMsg, LAddress::L2BROADCAST);
                    forwardControl(netwMsg);
                    sendDown(netwMsg);
                    nbDataPacketsForwarded++;
                }

                EV<<"je suis le noeud: "<<myNetwAddr<< ", j'ai reçu un msg de type: DATA de la part de :"<<netwMsg->getInitialSrcAddr()<<endl;

                EV<<"nbDataPacketsForwarded++; "<< nbDataPacketsForwarded << endl;
            }
            // trait SrcAdd as original ZKP demander node
            else if ((netwMsg->getKind() == ZKPC1 ||netwMsg->getKind() == ZKPC3 )&& netwMsg->getSrcAddr() != myNetwAddr)
            {
                netwMsg->setFinalDestAddr(tabson[0]);
                netwMsg->setFinalDestAddr1(tabson[1]);


                netwMsg->setTtl( netwMsg->getTtl()-1 );
                pCtrlInfo = netwMsg->removeControlInfo();


                if(optiEnable==1)
                {
                    multiSend(netwMsg);
                }
                else
                {
                    setDownControlInfo(netwMsg, LAddress::L2BROADCAST);
                    forwardControl(netwMsg);
                    sendDown(netwMsg);
                    nbDataPacketsForwarded++;
                }

                EV<<"je suis le noeud: "<<myNetwAddr<< ", j'ai reçu un msg de type: DATA de la part de :"<<netwMsg->getInitialSrcAddr()<<endl;

                EV<<"nbDataPacketsForwarded++; "<< nbDataPacketsForwarded << endl;
            }
        }
        else
        {
            EV<<"delete msg because ttl "<<endl;
        }
        // For Data
        if (netwMsg->getKind() == DATA && netwMsg->getFinalDestAddr()==1 && myNetwAddr==1) {
            const LAddress::L3Type& initSrcAdr  = netwMsg->getInitialSrcAddr();
            EV<<"initSrcAdr= "<< initSrcAdr<<endl;
            int seq =netwMsg->getSeqNum();
            //if(tabmsgrec[initSrcAdr][seq]==-1){
            if(notBroadcasted(msgCopy)){
                EV<<"je suis le noeud 1 j'ai reçu un msg de type DATA # " << seq << " de la part de :"<<netwMsg->getInitialSrcAddr()<<", par l'intermediare de : "<<netwMsg->getSrcAddr()<<endl;
                recuControl(msgCopy);
                delayTest(msgCopy);
                TimeDis(msgCopy);
                //sendUp(decapsMsg(msgCopy));
                nbDataPacketsReceived++;
                EV<<"nbDataPacketsReceived++; "<<nbDataPacketsReceived<<endl;
            }
            else{
                //EV<<"je suis le noeud 1 j'ai reçu un msg de type DATA de la part de :"<<netwMsg->getInitialSrcAddr()<<", par l'intermediare de : "<<netwMsg->getSrcAddr()<<", et je l'ai supppp"<<endl;;
                delete msgCopy;
                //for (i=0; i<7;i++){
                //EV<<"tabmsgrec[initSrcAdr] = "<<tabmsgrec[initSrcAdr]<<endl;
                //}
            }
        }
        //zkp
        if (zkpEnable ==1){
            if (netwMsg->getKind() == ZKPC0 && netwMsg->getFinalDestAddr()==1 && myNetwAddr==1) {

                zkpC1(msgCopy);

                msgCopy->setTtl(defaultTtl);
                msgCopy->setRi(Vacop);
                msgCopy->setFinalDestAddr(msgCopy->getSrcAddr());
                msgCopy->setSrcAddr(msgCopy->getInitialSrcAddr());
                msgCopy->setInitialSrcAddr(myNetwAddr);
                msgCopy->setName("ZKPC1");
                msgCopy->setKind(ZKPC1);

                pCtrlInfo = msgCopy->removeControlInfo();

                setDownControlInfo(msgCopy, LAddress::L2BROADCAST);
                forwardControl(msgCopy);
                sendDown(msgCopy);

            }

            if (netwMsg->getKind() == ZKPC1 && netwMsg->getSrcAddr()  == myNetwAddr) {
                zkpC2(msgCopy);

                msgCopy->setTtl(defaultTtl);
                msgCopy->setLen11(siz);
                msgCopy->setNbHops(0);

                i=0;
                while (i<=3){
                    if(tab[i]==1){
                        rep1=1;
                        i=4;
                    }
                    i=i+2;
                }
                i=0;
                if (rep1==1){
                    netwMsg->setFinalDestAddr(1);
                    netwMsg->setFinalDestAddr1(2540);
                    check=1;
                }else{
                    netwMsg->setFinalDestAddr(tab[i]);
                    netwMsg->setFinalDestAddr1(tab[i+2]);
                    check=1;
                }
                rep1=0;

                msgCopy->setSrcAddr(myNetwAddr);
                msgCopy->setInitialSrcAddr(myNetwAddr);
                msgCopy->setName("ZKPC2");
                msgCopy->setKind(ZKPC2);

                pCtrlInfo = msgCopy->removeControlInfo();
                if(optiEnable==1)
                {
                    multiSend(msgCopy);
                }
                else
                {
                    setDownControlInfo(msgCopy, LAddress::L2BROADCAST);
                    forwardControl(msgCopy);
                    sendDown(msgCopy);
                }

            }

            if (netwMsg->getKind() == ZKPC2 && netwMsg->getFinalDestAddr()== 1 && myNetwAddr==1) {
                zkpC3(msgCopy);

                msgCopy->setTtl(defaultTtl);
                msgCopy->setFinalDestAddr(msgCopy->getSrcAddr());
                msgCopy->setSrcAddr(msgCopy->getInitialSrcAddr());
                msgCopy->setInitialSrcAddr(myNetwAddr);
                msgCopy->setName("ZKPC3");
                msgCopy->setKind(ZKPC3);

                pCtrlInfo = msgCopy->removeControlInfo();

                setDownControlInfo(msgCopy, LAddress::L2BROADCAST);
                forwardControl(msgCopy);
                sendDown(msgCopy);

            }

            if (netwMsg->getKind() == ZKPC3 && netwMsg->getSrcAddr()  == myNetwAddr) {
                if (myNetwAddr == 0)
                {
                    int b1=1;
                }
                else if  (myNetwAddr == 2)
                {
                    int b2=2;
                }
                else if  (myNetwAddr == 3)
                {
                    int b3=3;
                }
                else if  (myNetwAddr == 4)
                {
                    int b4=4;
                }
                else if  (myNetwAddr == 5)
                {
                    int b5=5;
                }
                else if  (myNetwAddr == 6)
                {
                    int b6=6;
                }
                msgCopy = this->dataPck->dup();

                pCtrlInfo = msgCopy->removeControlInfo();
                if(optiEnable==1)
                {
                    multiSend(msgCopy);
                }
                else
                {
                    setDownControlInfo(msgCopy, LAddress::L2BROADCAST);
                    forwardControl(msgCopy);
                    sendDown(msgCopy);
                }
            }
        }
        //zkp


        if (pCtrlInfo != NULL)
            delete pCtrlInfo;
    }
}

void CnSm::handleLowerControl(cMessage *msg)
{
    delete msg;
}

void CnSm::handleUpperMsg(cMessage* msg)
{
    //BGW
    const cObject* pCtrlInfo = NULL;

    EV<<"UUUUUUUUUUUUUUUUUUUUUUUUUPPPPPPPPPPPPPPPPEEEERRRRRRRRRRRR : "<<myNetwAddr<<endl;
    EV<<"ma table contient:"<<endl;
    for (i=0;i<=5; i++)
        EV<<tab[i]<<endl;
    i=0;
    CnSmPkt*    pkt   = new CnSmPkt(msg->getName(), DATA);
    pkt->setName("DATA");

    pkt->setFinalDestAddr(tab[i]);
    pkt->setFinalDestAddr1(tab[i+2]);


    pkt->setInitialSrcAddr(myNetwAddr);
    pkt->setSrcAddr(myNetwAddr);
    pkt->setNbHops(0);
    pkt->setSeqNum(floodSeqNumber);
    pkt->setTtl(defaultTtl);
    floodSeqNumber++;
    pkt->setKind(DATA);
    pkt->setName("Data");
    if (zkpEnable == 1){
        zkpC0(pkt);
    }

    //BGW
    pCtrlInfo = msg->removeControlInfo();


    assert(static_cast<cPacket*>(msg));
    pkt->encapsulate(static_cast<cPacket*>(msg));
    pkt->addBitLength(headerLength);

    if(optiEnable==1)
    {
        multiSend(pkt);
    }
    else
    {
        setDownControlInfo(pkt, LAddress::L2BROADCAST);
        sendDown(pkt);
        nbDataPacketsSent++;
    }


    EV<<"nbDataPacketsSent++; "<<nbDataPacketsSent<<endl;

    //BGW
    if (pCtrlInfo != NULL)
        delete pCtrlInfo;

}

void CnSm::finish()
{

    bcMsgs.clear();
    cOwnedObject *Del=NULL;
    int OwnedSize=this->defaultListSize();
    for(int i=0;i<OwnedSize;i++){
        Del=this->defaultListGet(0);
        this->drop(Del);
        delete Del;
    }

    EV<<" Delay:  "<<delay / nbDataPacketsReceived  << " ; "<< delay<< " ; "<< nbDataPacketsReceived<<endl;

    recordScalar("nbDataPacketsForwarded", nbDataPacketsForwarded);
    recordScalar("nbDataPacketsReceived", nbDataPacketsReceived);
    recordScalar("nbDataPacketsSent", nbDataPacketsSent);
    recordScalar("dataReceived", dataReceived);
    recordScalar("nbDesquence", nbDesquence);
    recordScalar("nbForwarded0", nbForwarded0);
    recordScalar("nbForwarded2", nbForwarded2);
    recordScalar("nbForwarded3", nbForwarded3);
    recordScalar("nbForwarded4", nbForwarded4);
    recordScalar("nbForwarded5", nbForwarded5);
    recordScalar("nbForwarded6", nbForwarded6);
    recordScalar("nbRecu0", nbRecu0);
    recordScalar("nbRecu2", nbRecu2);
    recordScalar("nbRecu3", nbRecu3);
    recordScalar("nbRecu4", nbRecu4);
    recordScalar("nbRecu5", nbRecu5);
    recordScalar("nbRecu6", nbRecu6);
    recordScalar("NbT005", t005);
    recordScalar("NbT015", t015);
    recordScalar("NbT025", t025);
    recordScalar("NbT035", t035);
    recordScalar("NbT045", t045);
    recordScalar("NbT055", t055);
    recordScalar("NbT065", t065);
    recordScalar("NbT075", t075);
    recordScalar("NbT085", t085);
    recordScalar("NbT095", t095);
    recordScalar("NbT105", t105);
    recordScalar("NbT115", t115);
    recordScalar("NbT125", t125);
    recordScalar("NbT135", t135);
    recordScalar("NbT145", t145);
    recordScalar("NbT155", t155);
    recordScalar("NbT165", t165);
    recordScalar("NbT175", t175);
    recordScalar("NbT010", t010);
    recordScalar("NbT020", t020);
    recordScalar("NbT030", t030);
    recordScalar("NbT040", t040);
    recordScalar("NbT050", t050);
    recordScalar("NbT060", t060);
    recordScalar("NbT070", t070);
    recordScalar("NbT080", t080);
    recordScalar("NbT090", t090);
    recordScalar("NbT100", t100);
    recordScalar("NbT110", t110);
    recordScalar("NbT120", t120);
    recordScalar("NbT130", t130);
    recordScalar("NbT140", t140);
    recordScalar("NbT150", t150);
    recordScalar("NbT160", t160);
    recordScalar("NbT170", t170);
    recordScalar("NbT180", t180);

    /*
    if(myNetwAddr==1)
    {
        LogNormalShadowing LS1;
        double sum =0;
        for(int i = 0; i<7; i++)
        {
            for(int j=0; j<7; j++)
            {
                if(i<j)
                {
                    sum =0 ;
                    LS1.sender=i;
                    LS1.receiver=j;
                    for(int q=1; q<8; q++)
                    {
                        LS1.posture=q;
                        sum = sum +LS1.probaLink();
                    }
                    EV<<i<<" : "<<j<<"--"<<sum/7<<endl;
                }
            }
        }
    }
     */
    recordScalar("meanNbHops", (double) nbHops / (double) nbDataPacketsReceived);

    /*
    NetQueue::iterator it;
    for (it = netQueue.begin(); it != netQueue.end(); ++it) {
        delete (*it);
    }
     */
}

bool CnSm::notBroadcasted(CnSmPkt* msg) {

    cBroadcastList::iterator it;

    //serach the broadcast list of outdated entries and delete them
    for (it = bcMsgs.begin(); it != bcMsgs.end(); it++) {
        /*
        if (it->delTime < simTime()) {
            bcMsgs.erase(it);
            it--;
        }
         */
        //message was already broadcasted
        if ((it->srcAddr == msg->getInitialSrcAddr()) && (it->seqNum
                == msg->getSeqNum())) {
            // update entry
            it->delTime = simTime() + bcDelTime;
            return false;
        }
    }
    /*
    //delete oldest entry if max size is reached
    if (bcMsgs.size() >= bcMaxEntries) {
        EV<<"bcMsgs is full, delete oldest entry\n";
        bcMsgs.pop_front();
    }
     */
    switch (msg->getInitialSrcAddr())
    {
    case 0 :
        if(msg->getSeqNum() < Deseqence0)
        {
            nbDesquence++;
        }
        Deseqence0=msg->getSeqNum();
        break;
    case 2 :
        if(msg->getSeqNum() < Deseqence2)
        {
            nbDesquence++;
        }
        Deseqence2=msg->getSeqNum();
        break;
    case 3 :
        if(msg->getSeqNum() < Deseqence3)
        {
            nbDesquence++;
        }
        Deseqence3=msg->getSeqNum();
        break;
    case 4 :
        if(msg->getSeqNum() < Deseqence4)
        {
            nbDesquence++;
        }
        Deseqence4=msg->getSeqNum();
        break;
    case 5 :
        if(msg->getSeqNum() < Deseqence5)
        {
            nbDesquence++;
        }
        Deseqence5=msg->getSeqNum();
        break;
    case 6 :
        if(msg->getSeqNum() < Deseqence6)
        {
            nbDesquence++;
        }
        Deseqence6=msg->getSeqNum();
        break;
    default:
        break;
    }
    bcMsgs.push_back(Bcast(msg->getSeqNum(), msg->getInitialSrcAddr(), simTime() +bcDelTime));
    return true;
}

void CnSm::forwardControl(CnSmPkt *msg)
{
    int x=msg->getInitialSrcAddr();
    switch (x)
    {
    case 0 :
        nbForwarded0++;
        break;
    case 2 :
        nbForwarded2++;
        break;
    case 3 :
        nbForwarded3++;
        break;
    case 4 :
        nbForwarded4++;
        break;
    case 5 :
        nbForwarded5++;
        break;
    case 6 :
        nbForwarded6++;
        break;
    default:
        break;
    }
}

void CnSm::recuControl(CnSmPkt *msg)
{
    int x=msg->getInitialSrcAddr();
    switch (x)
    {
    case 0 :
        nbRecu0++;
        break;
    case 2 :
        nbRecu2++;
        break;
    case 3 :
        nbRecu3++;
        break;
    case 4 :
        nbRecu4++;
        break;
    case 5 :
        nbRecu5++;
        break;
    case 6 :
        nbRecu6++;
        break;
    default:
        break;
    }
}

void CnSm::multiSend(CnSmPkt* msg)
{
    //BGW
    CnSmPkt* msgCopy;
    int nbT=0;
    LogNormalShadowing LS1, LS2;
    LS1.sender=(int)(myNetwAddr);
    LS1.receiver=msg->getFinalDestAddr();
    LS1.posture=posture;
    int nbT1=LS1.nbForTrying();

    if((msg->getFinalDestAddr1()!=2540) && (msg->getFinalDestAddr1()!=-1))
    {
        LS2.sender=(int)(myNetwAddr);
        LS2.receiver=msg->getFinalDestAddr1();
        LS2.posture=posture;
        int nbT2=LS2.nbForTrying();

        if(nbT2>nbT1)
            nbT = nbT1;
        else
            nbT = nbT2;
    }
    else
        nbT= nbT1;

    for (int i =0; i<nbT; i++)
    {
        msgCopy =msg->dup();
        if(myNetwAddr != msgCopy->getInitialSrcAddr())
        {
            nbDataPacketsForwarded++;
            forwardControl(msgCopy);
        }
        else
            nbDataPacketsSent++;
        setDownControlInfo(msgCopy, LAddress::L2BROADCAST);
        sendDown(msgCopy);
    }
}

cMessage* CnSm::decapsMsg(CnSmPkt *msg)
{
    cMessage *m = msg->decapsulate();
    setUpControlInfo(m, msg->getSrcAddr());
    nbHops = nbHops + msg->getNbHops();
    delete msg;
    return m;
}

void CnSm::delayTest(CnSmPkt *msg)
{
    delay = delay + (simTime() -  msg->getCreationTime());
}

void CnSm::TimeDis(CnSmPkt *msg)
{
    simtime_t time = msg->getCreationTime();
    if (time<5)
        t005 ++;
    else if(time < 10)
        t010 ++;
    else if(time < 15)
        t015 ++;
    else if(time < 20)
        t020 ++;
    else if(time < 25)
        t025 ++;
    else if(time < 30)
        t030 ++;
    else if(time < 35)
        t035 ++;
    else if(time < 40)
        t040 ++;
    else if(time < 45)
        t045 ++;
    else if(time < 50)
        t050 ++;
    else if(time < 55)
        t055 ++;
    else if(time < 60)
        t060 ++;
    else if(time < 65)
        t065 ++;
    else if(time < 70)
        t070 ++;
    else if(time < 75)
        t075 ++;
    else if(time < 80)
        t080 ++;
    else if(time < 85)
        t085 ++;
    else if(time < 90)
        t090 ++;
    else if(time < 95)
        t095 ++;
    else if(time < 100)
        t100 ++;
    else if(time < 105)
        t105 ++;
    else if(time < 110)
        t110 ++;
    else if(time < 115)
        t115 ++;
    else if(time < 120)
        t120 ++;
    else if(time < 125)
        t125 ++;
    else if(time < 130)
        t130 ++;
    else if(time < 135)
        t135 ++;
    else if(time < 140)
        t140 ++;
    else if(time < 145)
        t145 ++;
    else if(time < 150)
        t150 ++;
    else if(time < 155)
        t155 ++;
    else if(time < 160)
        t160 ++;
    else if(time < 165)
        t165 ++;
    else if(time < 170)
        t170 ++;
    else if(time < 175)
        t175 ++;
    else if(time < 180)
        t180 ++;
}

void CnSm::zkpC0(CnSmPkt *msg)
{
    this->dataPck = msg->dup();
    msg->setKind(ZKPC0);
    ////////////////////////convert ID to binary/////////////////////////////////////////////////////
    int y=0;
    for(int i=0;i<4;i++) {
        bitset <4> binary(myNetwAddr);
        for(int k=3; k>=0;k--)
        {
            if (binary[k]==1) IDbin[y]=1;
            else IDbin[y]=0;
            y++;
        }
    }
    ///////////////////////////////////calcule V ^ p////////////////////////////
    BN_CTX *Ctx = BN_CTX_new();
    x = BN_new();
    cop = BN_new();
    resl=BN_new();

    BN_dec2bn(&cop, V);
    BN_dec2bn(&x, q);

    char* VqNS1;
    BN_exp(resl,cop,x,Ctx);
    VqNS1 =BN_bn2dec(resl);

    ////////////////////////////////convert VqNS1 to binary///////////////////////////////////////////////////////
    string myString = reinterpret_cast<const char*>(VqNS1);
    std::string YmBin;
    for (std::size_t ii = 0; ii < myString.size(); ++ii)
    {
        bitset<4> b(myString.c_str()[ii]);
        YmBin+= b.to_string();
    }
    len111=YmBin.length();
    int VqNS1Bin[len111];
    for (i=0; i<len111; i++)
        VqNS1Bin[i]=YmBin[i]-'0';

    siz=4+len111+2;

    /////////////////////////////////concat the results ////////////////////////////////////////////
    int concat1[siz];
    for (i=0; i<siz; i++) concat1[i]=-2;
    ///////////////////////////////////////////////////////////////////////////////////////////////
    for (k=0; k<4; k++) concat1[k]=IDbin[k];
    concat1[k]= -1;
    i=0;
    for (k=5; k<(len111+5); k++)
    {
        concat1[k]=VqNS1Bin[i];
        i++;
    }
    concat1[k]= -1;
    ///////////////////////////////cipher////////////////////////////////////////////////
    //Res0 est un tableau qui contient le resultat du "ou exclusif" entre concat1 et key0N
    for (i=0; i<2700; i++)
        tabx[i]=key0N[i]-'0';
    for (i=0; i<siz; i++)
    {
        if (concat1[i]==-1)
            Res0[i]=-1;
        else
        {
            if (concat1[i]==-2)
                Res0[i]=-2;
            else
                Res0[i]= tabx[i] ^ concat1[i];
        }
    }
    ///////////////////////////////////////////////////////////////////////////////////////
    for (k=0; k<siz; k++)
    {
        if (Res0[k]==-2)
            k=siz+1;
        msg->setRes(k, Res0[k]);
    }

    len=strlen(VqNS1);
    msg->setLen11(siz);
    msg->setName("ZKPC0");
}
void CnSm::zkpC1( CnSmPkt* msg)
{
    //////////////////////////////////////////la reception de vq///////////////////////////////////////////////////////
    len=msg->getLen11();
    for (k=0; k<len; k++)
        Res0[k]=msg->getRes(k);
    int concat1[len];
    //////////////////////////////////////////déchiffrement/////////////////////////////////////////////////////////
    if (msg->getInitialSrcAddr() == 0) {
        for (i=0; i<2700; i++)
            tabx[i]=key1[i]-'0';
    }

    if (msg->getInitialSrcAddr() == 2) {
        for (i=0; i<2700; i++)
            tabx[i]=key2[i]-'0';
    }

    if (msg->getInitialSrcAddr() == 3) {
        for (i=0; i<2700; i++)
            tabx[i]=key3[i]-'0';
    }//end mynetAddr==3

    if (msg->getInitialSrcAddr() == 4) {
        for (i=0; i<2700; i++)
            tabx[i]=key4[i]-'0';
    }

    if (msg->getInitialSrcAddr() == 5) {
        for (i=0; i<2700; i++)
            tabx[i]=key5[i]-'0';
    }

    if (msg->getInitialSrcAddr() == 6) {
        for (i=0; i<2700; i++)
            tabx[i]=key6[i]-'0';
    }

    for (k=0; k<len; k++)
    {
        if (Res0[k]==-1)
            concat1[k]=-1;
        else
            concat1[k]=Res0[k] ^ tabx[k];
    }
    //////////////////////////////////////extraire V^q//////////////////////////////////////////////////
    k=0;
    len11=len-4-2;
    char ResVq[len11];
    for (i=5; i<(len-1); i++)
    {
        ResVq[k]= concat1[i]+'0';
        k++;
    }
    ////////////////////////////////////////////////////////////////////////////////////////
    n=k/4;
    char tableau1[n];
    int decimal = 0 ;
    k,i,j,y=0;

    for(j = 0 ; j < k ; j++)
    {
        for (i=0; i<4; i++)
        {
            decimal=(decimal*2)+(ResVq[j]-'0');
            j++;
        }
        j=j-1;
        i=0;
        tableau1[y]=decimal+'0';
        decimal=0;
        y++;
    }
    char* hbltn;
    rnd=BN_new();
    BN_dec2bn(&rnd, tableau1);
    hbltn = BN_bn2dec(rnd);
    hbltn=NULL;
    ///////////////////////////////////je calcule v^q^p/////////////////////////////////////////////////////////
    yy = BN_new();
    cop = BN_new();
    if (msg->getInitialSrcAddr() == 0) {
        BN_dec2bn(&cop, V01);
        BN_dec2bn(&yy, p01);
    }

    if (msg->getInitialSrcAddr() == 2) {
        BN_dec2bn(&cop, V02);
        BN_dec2bn(&yy, p02);
    }


    if (msg->getInitialSrcAddr() == 3) {
        BN_dec2bn(&cop, V03);
        BN_dec2bn(&yy, p03);
    }

    if (msg->getInitialSrcAddr() == 4) {
        BN_dec2bn(&cop, V04);
        BN_dec2bn(&yy, p04);
    }


    if (msg->getInitialSrcAddr() == 5) {
        BN_dec2bn(&cop, V05);
        BN_dec2bn(&yy, p05);
    }

    if (msg->getInitialSrcAddr() == 6){
        BN_dec2bn(&cop, V06);
        BN_dec2bn(&yy, p06);
    } //end if noeud==6
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /********************************* Etape 2 ***********************************************/
    BN_CTX *Ctx = BN_CTX_new();
    reslf=BN_new();
    BN_exp(reslf,rnd,yy,Ctx);
    char* hbltn1;
    hbltn1 =BN_bn2dec(reslf);
    len=strlen(hbltn1);
    /********************************* Etape 3 Binary ***********************************************/
    //convertir le résultat en binaire
    len=strlen(hbltn1);
    len1=len*4;
    //int VpqBin[len1];
    y=0;

    string myString1 = reinterpret_cast<const char*>(hbltn1);
    std::string XmBin;
    for (std::size_t ii = 0; ii < myString1.size(); ++ii)
    {
        bitset<4> b(myString1.c_str()[ii]);
        XmBin+= b.to_string();
    }

    len1=XmBin.length();
    int VpqBin[len1];
    for (i=0; i<len1; i++)
        VpqBin[i]=XmBin[i]-'0';

    if (len3 != len1){
        Vacop = rand() % (len1-200);         // v in the range 0 to 1
        len3=len1;
    }
    Va=Vacop;
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //generation d'un nombre de bits aleatoire pour faire un ou exclusif entre tableau et ce nombre
    int v;
    if (len2 != len1){
        for (i=0; i<200; i++)
        {
            v = rand() % 2;         // v in the range 0 to 1
            tab1[i]=v;
        }
        len2=len1;
    }
    //Res0 est un tableau qui contient le resultat du "ou exclusif" entre VpqBin et tab1
    for (i=0; i<200; i++)
    {
        if (i<200){
            Res0[i]= tab1[i] ^ VpqBin[Va];
            Va++;
        }
        else Res0[i]=-1;
    }
    for (i=0; i<200; i++) k02[i]=Res0[i];
    for (i=0; i<200; i++)
        for (k=0; k<200; k++)
            msg->setRes(k, k02[k]);
    msg->setLen11(200);
    ////////////////////////////////////////compute and convert vp to binary///////////////////////////////////////////////////
    Ctx = BN_CTX_new();
    resl=BN_new();
    BN_exp(resl,cop,yy,Ctx);
    hbltn =BN_bn2dec(resl);
    len=strlen(hbltn);
    //convertir le résultat en binaire
    len=strlen(hbltn);
    len11=len*4;
    y=0;
    //convertir le résultat en binaire
    len=strlen(hbltn);
    y=0;
    for( i=0;i<len;i++)
    {
        lettre = hbltn[i];
        bitset <4> binary(lettre);
        for(k=3; k>=0;k--){
            if (binary[k]==1) tableau[y]=1;
            else tableau[y]=0;
            y++;
        }
    }
    len1=len*4;
    siz=len1+4+2;
    /////////////////////////////////concat the results ////////////////////////////////////////////
    int concat2[siz];
    for (i=0; i<siz; i++) concat2[i]=-2;
    ///////////////////////////////////////////////////////////////////////////////////////////////
    for (k=0; k<4; k++) concat2[k]=IDbin[k];
    concat2[k]= -1;
    i=0;
    for (k=5; k<(len1+5); k++)
    {
        concat2[k]=tableau[i];
        i++;
    }
    concat2[k]= -1;
    ////////////////////////// chiffrement//////////////////////////////////////////////////////////////////////
    //Res01 est un tableau qui contient le resultat du "ou exclusif" entre concat2 et tab
    for (i=0; i<siz; i++)
    {
        if (concat2[i]!=-1)
            Res01[i]= tabx[i] ^ concat2[i];
        else Res01[i]=-1;
    }
    for (i=0; i<siz; i++) k02[i]=Res01[i];

    for (k=0; k<siz; k++)
        msg->setRes1(k, k02[k]);

    msg->setSize(siz);

}
void CnSm::zkpC2( CnSmPkt* msg)
{
    len1=msg->getLen11();
    Va=msg->getRi();
    //bgw
    siz = msg->getSize();
    //bgw
    for (k=0; k<len1; k++)
        Res0[k]=msg->getRes(k);
    i=0;
    len11=msg->getSize();
    for (k=5; k<(siz-1); k++){
        Res01[i]=msg->getRes1(k);
        i++;
    }
    //////////////////////////////////déchiffrement de res01=(v^p)////////////////////////////////////////////

    for (i=0; i<len11; i++)
        tabx[i]=key0N[i]-'0';

    for (k=0; k<len11; k++)
    {
        if (Res01[k]==-1)
            concat[k]=-1;
        else
            concat[k]=Res01[k] ^ tabx[k+5];
    }
    /////////////////////////////////////convert V^p to decimal////////////////////////////////////////////////////
    n=len11/4;
    char tableau2[n];
    int decimal = 0 ;
    k,i,j,y=0;

    for(j = 0 ; j < len11 ; j++)
    {
        for (i=0; i<4; i++)
        {
            decimal=(decimal*2)+concat[j];
            j++;
        }
        j=j-1;
        i=0;
        tableau2[y]=decimal+'0';
        decimal=0;
        y++;
    }
    rnd=BN_new();
    BN_dec2bn(&rnd, tableau2);
    char* hbltn3;
    hbltn3 = BN_bn2dec(rnd);
    hbltn3=NULL;
    //////////////////////////////////Now the node have to compute V^p^q/////////////////////////////////////////////////////////////

    BN_CTX *Ctx = BN_CTX_new();
    BN_exp(resl,rnd,x,Ctx);
    Xm =BN_bn2dec(resl);
    len1=strlen(Xm);
    //////////////////////////////convert Xm(V^p^q) to binary//////////////////////////////////////////////////////

    string myString = reinterpret_cast<const char*>(Xm);
    std::string Vpq;
    for (std::size_t ii = 0; ii < myString.size(); ++ii)
    {
        bitset<4> b(myString.c_str()[ii]);
        Vpq+= b.to_string();
    }
    len111=Vpq.size();
    //int VpqBin[len111];
    for (i=0; i<len111; i++)
        tableau[i]=Vpq[i]-'0';
    /////////////////////////////////////concat ID and V^p^q/////////////////////////////////////////////////////////////
    siz=4+200+2;
    /////////////////////////////////concat the results ////////////////////////////////////////////
    int concat2[siz];
    for (i=0; i<siz; i++) concat2[i]=-2;
    ///////////////////////////////////////////////////////////////////////////////////////////////
    for (k=0; k<4; k++) concat2[k]=IDbin[k];
    concat2[k]= -1;
    for (k=5; k<(200+5); k++)
    {
        concat2[k]=tableau[Va];
        Va++;
    }
    concat2[k]= -1;
    ///////////////////////////////cipher////////////////////////////////////////////////
    //Res01 est un tableau qui contient le resultat du "ou exclusif" entre concat2 et key0N
    for (i=0; i<siz; i++)
    {
        if (concat2[i]==-1)
            Res01[i]=-1;
        else
        {
            if (concat2[i]==-2)
                Res01[i]=-2;
            else
                Res01[i]= tabx[i] ^ concat2[i];
        }
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    for (k=0; k<len; k++)
        msg->setFkey(k, Xm[k]);


}
void CnSm::zkpC3( CnSmPkt* msg)
{
    len1=msg->getLen11();
    for (k=0; k<200; k++) msg->setKey(k, tab1[k]);
}
